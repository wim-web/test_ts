{"version":3,"sources":["../../../src/timing/concrete/constraint.ts"],"sourcesContent":["\nimport { TimeConstraint } from \"@/timing/contract\"\nimport { AtLeastOne } from \"@/util/types\"\n\nexport class Rate implements TimeConstraint {\n    constructor(private readonly param: AtLeastOne<{\n        h: number,\n        m: number,\n    }>) { }\n\n    next(date: Date): Date {\n        const h_ms = (this.param.h || 0) * 60 * 60 * 1000\n        const m_ms = (this.param.m || 0) * 60 * 1000\n        const timestamp = date.getTime()\n\n        return new Date(timestamp + h_ms + m_ms)\n    }\n}\n\nexport class Daily implements TimeConstraint {\n    constructor(private readonly param: {\n        h: number,\n        m: number,\n    }) { }\n\n    next(date: Date): Date {\n        const base = new Date(\n            Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), this.param.h, this.param.m)\n        )\n\n        return date <= base\n            ? base\n            : (() => {\n                base.setDate(base.getDate() + 1)\n                return base\n            })()\n    }\n}\n"],"mappings":";AAIO,IAAM,OAAN,MAAqC;AAAA,EACxC,YAA6B,OAGzB;AAHyB;AAAA,EAGvB;AAAA,EAEN,KAAK,MAAkB;AACnB,UAAM,QAAQ,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK;AAC7C,UAAM,QAAQ,KAAK,MAAM,KAAK,KAAK,KAAK;AACxC,UAAM,YAAY,KAAK,QAAQ;AAE/B,WAAO,IAAI,KAAK,YAAY,OAAO,IAAI;AAAA,EAC3C;AACJ;AAEO,IAAM,QAAN,MAAsC;AAAA,EACzC,YAA6B,OAG1B;AAH0B;AAAA,EAGxB;AAAA,EAEL,KAAK,MAAkB;AACnB,UAAM,OAAO,IAAI;AAAA,MACb,KAAK,IAAI,KAAK,eAAe,GAAG,KAAK,YAAY,GAAG,KAAK,WAAW,GAAG,KAAK,MAAM,GAAG,KAAK,MAAM,CAAC;AAAA,IACrG;AAEA,WAAO,QAAQ,OACT,QACC,MAAM;AACL,WAAK,QAAQ,KAAK,QAAQ,IAAI,CAAC;AAC/B,aAAO;AAAA,IACX,GAAG;AAAA,EACX;AACJ;","names":[]}