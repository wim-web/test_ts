{"version":3,"sources":["../../../src/timing/concrete/redis.ts"],"sourcesContent":["import { TimeConstraint, Timing } from \"@/timing/contract\";\nimport { Redis } from \"ioredis\";\n\ntype RedisTimingInput = {\n    host: string, port: number, keyPrefix?: string\n}\n\nexport const withRedisTiming = async (input: RedisTimingInput, f: (timing: RedisTiming) => Promise<void>) => {\n    const timing = new RedisTiming(input)\n\n    try {\n        await f(timing)\n    } finally {\n        await timing.terminate()\n    }\n}\n\nexport class RedisTiming implements Timing {\n    private client\n\n    constructor({ host, port, keyPrefix }: RedisTimingInput) {\n        this.client = new Redis({\n            host,\n            port,\n            keyPrefix\n        })\n    }\n\n    async allow({\n        key,\n        date,\n    }: { key: string, date: Date; }) {\n        // TTLで勝手に消えるのでkeyで取得できたらfalse, なかったらtrue\n        const result = await this.client.exists(key)\n        return result === 0\n    }\n\n    async complete({\n        key,\n        constraint,\n        date,\n    }: { key: string, constraint: TimeConstraint, date: Date; }) {\n        const next = constraint.next(date).getTime()\n        const ttl = Math.floor((next - date.getTime()) / 1000); // TTLを秒単位で計算\n\n        // nextまでの時間をTTLとしてredisに保存する\n        // keyはkeyでvalueはなくてもいい\n        if (ttl > 0) {\n            await this.client.set(key, '', 'EX', ttl); // TTLを設定してキーを保存\n        }\n    }\n\n    async terminate() {\n        await this.client.quit()\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAsB;AAMf,IAAM,kBAAkB,OAAO,OAAyB,MAA8C;AACzG,QAAM,SAAS,IAAI,YAAY,KAAK;AAEpC,MAAI;AACA,UAAM,EAAE,MAAM;AAAA,EAClB,UAAE;AACE,UAAM,OAAO,UAAU;AAAA,EAC3B;AACJ;AAEO,IAAM,cAAN,MAAoC;AAAA,EAGvC,YAAY,EAAE,MAAM,MAAM,UAAU,GAAqB;AACrD,SAAK,SAAS,IAAI,qBAAM;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,MAAM;AAAA,IACR;AAAA,IACA;AAAA,EACJ,GAAiC;AAE7B,UAAM,SAAS,MAAM,KAAK,OAAO,OAAO,GAAG;AAC3C,WAAO,WAAW;AAAA,EACtB;AAAA,EAEA,MAAM,SAAS;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,EACJ,GAA6D;AACzD,UAAM,OAAO,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC3C,UAAM,MAAM,KAAK,OAAO,OAAO,KAAK,QAAQ,KAAK,GAAI;AAIrD,QAAI,MAAM,GAAG;AACT,YAAM,KAAK,OAAO,IAAI,KAAK,IAAI,MAAM,GAAG;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY;AACd,UAAM,KAAK,OAAO,KAAK;AAAA,EAC3B;AACJ;","names":[]}